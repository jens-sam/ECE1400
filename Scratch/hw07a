# updated main section

 with open(calibration_file, "r") as f:
        cal = json.load(f)

    # df = pd.read_csv("imu.csv")
    # read file
    d = pd.read_csv(imu_file).to_numpy().transpose()
    print(d)
    # ax = df['a_x']*cal['a_x_scale']
    # ax.to_numpy()

    #meters per second and radians per second
    ax = integrat.cumtrapz(df['a_x']*cal['a_x_scale'])
    ay = integrat.cumtrapz(df['a_y'] * cal['a_y_scale'])
    az = integrat.cumtrapz(df['a_z'] * cal['a_z_scale'])

    # integrate back to out csv file
    xyz_integrate = integrate.cumtrapz(ax, ay, az)


def cal():

    f = open("../test/cal.json")
    cal = json.load(f)

    # read file
    df = pd.read_csv("../test/imu.csv")
    
    # data file time as variable
    t = df['time']

    #meters per second and radians per second
    v_x[1:] = integrat.cumtrapz((df['a_x']*cal['a_x_scale']), t, dx=1.0, axis=-1, initial=None)
    v_y = integrat.cumtrapz((df['a_y'] * cal['a_y_scale']), t, dx=1.0, axis=-1, initial=None)
    v_z = integrat.cumtrapz((df['a_z'] * cal['a_z_scale']), t, dx=1.0, axis=-1, initial=None)

    vx = np.zeros(len(df['a_x']))
    vx[1:] = integrat.cumtrapz(y=ax, x=df['time'])
    pdf = pd.df(np.array[x, vx, ax].transpose, columns=["x", "vx", "ax"])
    
    # integrate back to out csv file
    xyz_position = integrate.cumtrapz((v_x, v_y, v_z), t, dx=1.0, axis=-1, initial=None)
    print(xyz_position)
    
    
  def cal():

   f = open("../test/cal.json")
   c = json.load(f)

   # read file
   df = pd.read_csv("../test/imu.csv")

   df.insert(2, "v_x", np.zeros(4000))
   df.insert(3, "v_y", np.zeros(4000))
   df.insert(4, "v_z", np.zeros(4000))

   #meters per second and radians per second
   df['v_x'][1:] = integrate.cumtrapz((df['a_x']*c['a_x_scale']), df['time'], dx=1.0, axis=-1, initial=None)
   df['v_y'][1:] = integrate.cumtrapz((df['a_y'] * c['a_y_scale']), df['time'], dx=1.0, axis=-1, initial=None)
   df['v_z'][1:] = integrate.cumtrapz((df['a_z'] * c['a_z_scale']), df['time'], dx=1.0, axis=-1, initial=None)


   df.insert(5, "x", np.zeros(4000))
   df.insert(6, "y", np.zeros(4000))
   df.insert(7, "z", np.zeros(4000))

   # integrate again for y values of v_x,y,z
   df['x'][1:] = integrate.cumtrapz((df['v_x']), df['time'], dx=1.0, axis=-1, initial=None)
   df['y'][1:] = integrate.cumtrapz((df['v_y']), df['time'], dx=1.0, axis=-1, initial=None)
   df['z'][1:] = integrate.cumtrapz((df['v_z']), df['time'], dx=1.0, axis=-1, initial=None)

   print(df)
    fig, axs = plt.subplots(3)
    
    axs[0].set_ylabel("Position [m]")
    df.plot(x='time', y=['x', 'y', 'z'], ax=axs[0])

    axs[1].set_ylabel("Velocity [m/s]")
    df.plot(x='time', y=['v_x', 'v_y', 'v_z'], ax=axs[1])
    
    axs[2].set_ylabel("Acceleration [m/s^2]")
    df.plot(x='time', y=['a_x', 'a_y', 'a_z'])
    
    # calculate for roll

    df.insert(11, "roll", np.zeros(4000))
    df.insert(12, "pitch", np.zeros(4000))
    df.insert(13, "yaw", np.zeros(4000))

    # meters per second and radians per second
    df['roll'][1:] = integrate.cumtrapz((df['v_roll'] * c['v_roll_scale']), df['time'], dx=1.0, axis=-1, initial=None)
    df['pitch'][1:] = integrate.cumtrapz((df['v_pitch'] * c['v_pitch_scale']), df['time'], dx=1.0, axis=-1, initial=None)
    df['yaw'][1:] = integrate.cumtrapz((df['v_yaw'] * c['v_yaw_scale']), df['time'], dx=1.0, axis=-1, initial=None)

    df.insert(17, "a_roll", np.zeros(4000))
    df.insert(18, "a_pitch", np.zeros(4000))
    df.insert(19, "a_yaw", np.zeros(4000))

    # partial vroll / partial time = diff(vroll)/diff(time)
    df['a_roll'][1:] = df['v_roll'].diff()/df['time'].diff()
    df['a_pitch'][1:] = df['a_pitch'].diff()/df['time'].diff()
    df['a_yaw'][1:] = df['a_yaw'].diff()/df['time'].diff()

    # plotting yaw
    fig, axs = plt.subplots(3)

    axs[0].set_ylabel("Position [m]")
    df.plot(x='time', y=['roll', 'pitch', 'yaw'], ax=axs[0])

    axs[1].set_ylabel("Velocity [m/s]")
    df.plot(x='time', y=['v_roll', 'v_pitch', 'v_yaw'], ax=axs[1])

    axs[2].set_ylabel("Acceleration [m/s^2]")
    df.plot(x='time', y=['a_roll', 'a_pitch', 'a_yaw'], ax=axs[2])

    print(df)
    plt.show()
    df.to_csv(index=False)
